import javax.tools.JavaCompiler

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.11'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
}

group = 'com.ajou_nice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
def generated = 'src/main/generated'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', buildDir.toString() + '/generated/sources/annotationProcessor/java/main']
        }
    }
    main.java.srcDirs += [ generated ]
}

clean{
    delete file(generated)
}

dependencies {

    //thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // sockjs
    implementation 'org.webjars:sockjs-client:1.5.1'
    // stomp
    implementation 'org.webjars:stomp-websocket:2.3.4'
    // gson
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //MySQL 연동
    implementation 'com.mysql:mysql-connector-j:8.0.32'
    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //Swagger
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    //Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    // QueryDSL JPA
    implementation 'com.querydsl:querydsl-jpa'
    // e-mail
    implementation 'org.springframework.boot:spring-boot-starter-mail:2.6.3'
    //난수 생성
    implementation 'org.apache.commons:commons-lang3:3.0'
    //coolSM
    implementation 'net.nurigo:sdk:4.3.0'
    //security test
    implementation 'org.springframework.security:spring-security-test:5.7.3'
    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // QFile 생성 및 가져오기
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'


}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true

//        xml.destination file("${buildDir}/jacoco/index.xml")
//        csv.destination file("${buildDir}/jacoco/index.csv")
        html.destination file("${buildDir}/jacoco/index.html")
    }

    jacocoTestCoverageVerification {

        // 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
        violationRules {
            rule {
                element = 'CLASS'

                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.90
                }
            }
        }
    }

    test {
        finalizedBy 'jacocoTestReport'
        useJUnitPlatform()

        jacoco {
            def Qdomains = []

            for(qPattern in 'com/ajou_nice/with_pet/domain/entity/QA' .. 'com/ajou_nice/with_pet/domain/entity/QZ'){
                Qdomains.add(qPattern+'*')
            }
            excludes += Qdomains
            excludes += ["com/ajou_nice/with_pet/dto/**"]
        }
    }

    afterEvaluate{
        def Qdomains = []

        for(qPattern in 'com/ajou_nice/with_pet/domain/entity/QA' .. 'com/ajou_nice/with_pet/domain/entity/QZ'){
            Qdomains.add(qPattern+'*')
        }
        classDirectories.setFrom(files(classDirectories.files.collect{
            fileTree(dir: it,
                    excludes: Qdomains + ["com/ajou_nice/with_pet/dto/**"]
            )
        }))
    }
}
